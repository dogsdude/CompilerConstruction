#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 475 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; a structure to hold a digit, this is used by the lexer"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; a token type will be 'op, 'lparen, 'rparen, or 'digit or 'eof"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; repr is a character representation"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"token"
0 0 25 3 2 #" ("
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 74
(
 #"; a guard is a function that 'tests' the values you put into the str"
 #"ucture"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 76
(
 #"; remember: racket is dynamically typed so you kinda have to check t"
 #"hings to"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 47 #"; save yourself a ton of grief later (trust me)"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 24 3 7 #"#:guard"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 1 #" "
0 0 14 3 11 #"struct-name"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 14 #"is-token-type?"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 74
(
 #"\"expected a proper token-type which is-token-type? returns true fro"
 #"m, got\""
) 0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"eof"
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"char?"
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 48 #"\"expected a string? or eof? for token-repr, got\""
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 14 3 4 #"repr"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 16 #"; symbol -> bool"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #"; returns true if the token matches the symbols 'op, 'lparen, 'rpare"
 #"n, 'digit"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"is-token-type?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 3 #" ) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"lparen"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"rparen"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"eof"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; input-port -> token"
0 0 25 29 1 #"\n"
0 0 17 3 3 #"; r"
0 0 17 3 47 #"eturns the next input token from the input port"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"get-next-token"
0 0 25 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"input"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-char"
0 0 25 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\+"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\+"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\*"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\*"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\0"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\0"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\1"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\2"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\2"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\3"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\3"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\4"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\4"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\5"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\5"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\6"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\6"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\7"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\7"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\8"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\8"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\9"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\9"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\("
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"lparen"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\("
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\)"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"rparen"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\)"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 14 3 3 #"eof"
0 0 25 3 3 #") ("
0 0 14 3 5 #"token"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"eof"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"No such token\""
0 0 25 3 5 #")])))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #"; string -> 0 argument function that returns the next token on the s"
 #"tring"
) 0 0 25 29 1 #"\n"
0 0 17 3 93
(
 #"; this function creates a function that uses get-next-token on the s"
 #"tring that was passed in,"
) 0 0 25 29 1 #"\n"
0 0 17 3 64
#"; notice how we pass create the input by using open-input-string"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lexstr"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"input"
0 0 25 3 2 #" ("
0 0 14 3 17 #"open-input-string"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 5 #" () ("
0 0 14 3 14 #"get-next-token"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9         649 22           0 0           0 107 0 17 3 45
#"; (() -> token) -> (ast-node | ast-expr-node)"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; the parser takes a function (probably produced by lexstr) that"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; lexes the contents of the input stream"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 25 3 1 #" "
0 0 14 3 3 #"lex"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 24 #"; value node for numbers"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"ast-node"
0 0 25 3 2 #" ("
0 0 14 3 3 #"val"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 33 #"; expression nodes for operators "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 13 #"ast-expr-node"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 10 #"left-child"
0 0 25 3 1 #" "
0 0 14 3 11 #"right-child"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; ast -> val"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; this function takes an AST and returns the calculated value"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; note that we assume the tree was built correctly!"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"     (["
0 0 14 3 8 #"ast-node"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #"] "
0 0 14 3 1 #"v"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; str -> val"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; takes a string, creates the lexer and parser and then evaluates it"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"evalstr"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"lexer"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lexstr"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 25 3 1 #" "
0 0 14 3 5 #"lexer"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0           0 0           0
