#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 1270 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 27 #"\"llvm-emitter-skeleton.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 11 #"\"names.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 25 3 1 #" "
0 0 14 3 2 #"t:"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"types.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 14 #"\"niparser.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 15 #"\"typecheck.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 12 #"\"errors.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 9 #"\"log.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"trans"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"clear-errors"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"clear-writers"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 3 #"ast"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-str"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"error-generated?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 45 #"\"cannot translate due to scan or parse error\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"ty"
0 0 25 3 2 #" ("
0 0 14 3 13 #"typecheck-ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"error-generated?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"cannot translate due to type error\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 15 #"finish-emission"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"translate-str"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 24 #"; clear the errors first"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"clear-errors"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"clear-writers"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 3 #"ast"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-str"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"error-generated?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 46 #"\"cannot translate due to scan or parse errors\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"ty"
0 0 25 3 2 #" ("
0 0 14 3 13 #"typecheck-ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"error-generated?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"cannot translate due to type error\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 13 #"translate-ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"translate-ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 7 #"; begin"
0 0 17 3 17 #" with the prelude"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"emit-header"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"emit-main-header"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"emit-main-trailer"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 15 #"finish-emission"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";;BAD PARENS!!!"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 42 #"; deal with lists, like in let expressions"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 3 #") ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; integer literals"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"NumExpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #") ("
0 0 14 3 13 #"numexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; boolean literals"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"BoolVal"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #") ("
0 0 14 3 13 #"boolval->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 17 #"; string literals"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 10 #"StringExpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #") ("
0 0 14 3 16 #"stringexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 24 #"; variable declarations!"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 38 #";[(VarDecl _ _ _) (vardecl->llvm ast)]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 16 #"; function calls"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 11 #"FuncallExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 13 #"funcall->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 22 #"; variable expressions"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 30 #";[(VarExpr _) (var->llvm ast)]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 59
#"; let expressions--need these for any declarations to work!"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 36 #";[(LetExpr _ _) (letexpr->llvm ast)]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 15 #"; if statements"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"IfExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 14 3 13 #"if-then->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 25 #"; if then else statements"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"IfExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 18 #"if-then-else->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; math expressions"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"MathExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 14 #"mathexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 19 #"; logic expressions"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"LogicExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 15 #"logicexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 35 #"; boolean expressions (comparisons)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"BoolExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 14 #"boolexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 1 #"_"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Translation node \""
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 19 3 23 #"\" not implemented yet!\""
0 0 25 3 5 #")])])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"add-note"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 6 #"result"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; emits a call to a function"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"funcall->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"calling function: \""
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 14 #"symbol->string"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 16 #"FuncallExpr-name"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 2 #"ty"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"type"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 6 #"funval"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"funval"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 7 #"funname"
0 0 25 3 1 #" "
0 0 17 3 2 #";("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 3 #"eq?"
0 0 17 3 2 #" ("
0 0 17 3 16 #"t:FunValue-label"
0 0 17 3 1 #" "
0 0 17 3 6 #"funval"
0 0 17 3 2 #") "
0 0 17 3 3 #"#f)"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"symbol->string"
0 0 25 3 2 #" ("
0 0 14 3 16 #"FuncallExpr-name"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 2 #";("
0 0 17 3 10 #"Label-name"
0 0 17 3 2 #" ("
0 0 17 3 16 #"t:FunValue-label"
0 0 17 3 1 #" "
0 0 17 3 10 #"funval)))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 8 #"argtypes"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 25 3 3 #") ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"type"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 16 #"FuncallExpr-args"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 10 #"argresults"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 25 3 3 #") ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 3 #") ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"result"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 16 #"FuncallExpr-args"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 12 #"emit-funcall"
0 0 25 3 1 #" "
0 0 14 3 7 #"funname"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"type"
0 0 25 3 2 #") "
0 0 14 3 10 #"argresults"
0 0 25 3 1 #" "
0 0 14 3 8 #"argtypes"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 6 #"result"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; emits a numeric literal"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"numexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 34 #"; literal nums can go in registers"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 9 #"emit-math"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"add"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"add-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 6 #"result"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; emits a boolean literal"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"boolval->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 7 #"boolval"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 9 #"emit-bool"
0 0 25 3 1 #" "
0 0 14 3 7 #"boolval"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"add-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 6 #"result"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; emits a math expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"mathexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"expr1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"MathExpr-expr1"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 5 #"expr2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"MathExpr-expr2"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"result1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 7 #"result2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"emit-math"
0 0 25 3 2 #" ("
0 0 14 3 11 #"MathExpr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result1"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; emits a logic expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"logicexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"expr1"
0 0 25 3 2 #" ("
0 0 14 3 15 #"LogicExpr-expr1"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 5 #"expr2"
0 0 25 3 2 #" ("
0 0 14 3 15 #"LogicExpr-expr2"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"result1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 7 #"result2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 10 #"emit-logic"
0 0 25 3 2 #" ("
0 0 14 3 12 #"LogicExpr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result1"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"; emits a boolean expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"boolexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"expr1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"BoolExpr-expr1"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 5 #"expr2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"BoolExpr-expr2"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"result1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 7 #"result2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #";("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 13 #"t:StringType?"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-note"
0 0 17 3 1 #" "
0 0 17 3 5 #"expr1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"type))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 2 #";("
0 0 17 3 15 #"emit-stringcomp"
0 0 17 3 2 #" ("
0 0 17 3 11 #"BoolExpr-op"
0 0 17 3 1 #" "
0 0 17 3 4 #"node"
0 0 17 3 2 #") "
0 0 17 3 7 #"result1"
0 0 17 3 1 #" "
0 0 17 3 8 #"result2)"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 13 #"emit-boolexpr"
0 0 25 3 2 #" ("
0 0 14 3 11 #"BoolExpr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result1"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 7 #"result2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 5 #"emits"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 7 #"boolean"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 2 #" ("
0 0 17 3 2 #"ie"
0 0 17 3 1 #" "
0 0 17 3 11 #"comparison)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"#("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 14 #"compexpr->llvm"
0 0 17 3 1 #" "
0 0 17 3 5 #"node)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 9         307 17           0 0           0 50 0 25 3 2 #" ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"expr1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"MathExpr-expr1"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 5 #"expr2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"MathExpr-expr2"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"result1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"result2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"emit-comp"
0 0 25 3 2 #" ("
0 0 14 3 11 #"BoolExpr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 14 3 7 #"result1"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 14 3 7 #"result2"
0 0 25 3 4 #"))))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; emits a string expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"stringexpr->llvm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 19 #"emit-literal-string"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; emits an if statement (without else)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"if-then->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 11 #"IfExpr-test"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 10 #"truebranch"
0 0 25 3 2 #" ("
0 0 14 3 18 #"IfExpr-true-branch"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"if then\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"testres"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 9 #"truelabel"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 8 #"endlabel"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 23 #"emit-conditional-branch"
0 0 25 3 1 #" "
0 0 14 3 7 #"testres"
0 0 25 3 1 #" "
0 0 14 3 9 #"truelabel"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"true branch\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"emit-label"
0 0 25 3 1 #" "
0 0 14 3 9 #"truelabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 10 #"truebranch"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"emit-jump"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"emit-label"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 45 #"; emits an if then else statement (with else)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"if-then-else->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 11 #"IfExpr-test"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 10 #"truebranch"
0 0 25 3 2 #" ("
0 0 14 3 18 #"IfExpr-true-branch"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 11 #"falsebranch"
0 0 25 3 2 #" ("
0 0 14 3 19 #"IfExpr-false-branch"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"if/then/else\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 7 #"testres"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"trueres"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 10 #"truebranch"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 8 #"falseres"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 11 #"falsebranch"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 9 #"truelabel"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 10 #"falselabel"
0 0 25 3 1 #"("
0 0 14 3 10 #"make-label"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 8 #"endlabel"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 23 #"emit-conditional-branch"
0 0 25 3 1 #" "
0 0 14 3 7 #"testres"
0 0 25 3 1 #" "
0 0 14 3 9 #"truelabel"
0 0 25 3 1 #" "
0 0 14 3 10 #"falselabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"true branch\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"emit-label"
0 0 25 3 1 #" "
0 0 14 3 9 #"truelabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 10 #"truebranch"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"emit-jump"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 12 #"emit-comment"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"false branch\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"emit-label"
0 0 25 3 1 #" "
0 0 14 3 10 #"falselabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"ast->llvm"
0 0 25 3 1 #" "
0 0 14 3 11 #"falsebranch"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"emit-jump"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"emit-label"
0 0 25 3 1 #" "
0 0 14 3 8 #"endlabel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 8 #"emit-phi"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-note"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"type"
0 0 25 3 2 #") "
0 0 14 3 7 #"trueres"
0 0 25 3 1 #" "
0 0 14 3 9 #"truelabel"
0 0 25 3 1 #" "
0 0 14 3 8 #"falseres"
0 0 25 3 1 #" "
0 0 14 3 10 #"falselabel"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0           0
