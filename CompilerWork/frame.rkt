#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 557 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"types.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 11 #"\"names.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"; we're assuming a 64-bit machine, this would change depending on th"
 #"e"
) 0 0 25 29 1 #"\n"
0 0 17 3 67
#"; target architecture and you'd probably do some fancy module thing"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"WORD_SIZE"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; the min frame size is how much we need to push the Rarp each time "
 #"we"
) 0 0 25 29 1 #"\n"
0 0 17 3 46 #"; have a function call, we need room to store:"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; * the static link (if needed)"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; * the the return address"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; * the return value"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"MIN_FRAME_SIZE"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 9 #"WORD_SIZE"
0 0 25 3 1 #" "
0 0 17 3 24 #"; for the return address"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 9 #"WORD_SIZE"
0 0 25 3 1 #" "
0 0 17 3 21 #"; for the static link"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 9 #"WORD_SIZE"
0 0 25 3 3 #")) "
0 0 17 3 22 #"; for the return value"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; a frame consists of its name, which is a label (labels are address"
 #"es)"
) 0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; a static-link, which is also a label, an offset, which just counts"
 #" how"
) 0 0 25 29 1 #"\n"
0 0 17 3 67
#"; many locals and escaping variables have been seen, and finally, a"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; reference to the funval associated with this Frame (because we'll "
 #"need"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #"; parameter info). local-space is the number of bytes allocated for "
 #"the locals"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"Frame"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 11 #"static-link"
0 0 25 3 1 #" "
0 0 24 3 9 #"#:mutable"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 24 3 9 #"#:mutable"
0 0 25 3 12 #"]           "
0 0 17 3 34 #"; total size of the frame in bytes"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 6 #"locals"
0 0 25 3 1 #" "
0 0 24 3 9 #"#:mutable"
0 0 25 3 5 #"]    "
0 0 17 3 45 #"; total size of the locals allocated in bytes"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 6 #"funval"
0 0 25 3 1 #" "
0 0 24 3 9 #"#:mutable"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 13 #"#:transparent"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 7 #"#:guard"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 11 #"static-link"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 14 3 6 #"locals"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Label?"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"raise-argument-error"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"Expectd a Label? for its name field\""
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 11 #"static-link"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Label?"
0 0 25 3 1 #" "
0 0 14 3 11 #"static-link"
0 0 25 3 5 #"))) ("
0 0 14 3 20 #"raise-argument-error"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #" "
0 0 19 3 45 #"\"Expected a Label? for its static-link field\""
0 0 25 3 1 #" "
0 0 14 3 11 #"static-link"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 20 #"raise-argument-error"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #" "
0 0 19 3 56
#"\"Expected an exact-positive-integer? for its size field\""
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 25 3 1 #" "
0 0 14 3 6 #"locals"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 20 #"raise-argument-error"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #" "
0 0 19 3 58
#"\"Expected an exact-positive-integer? for its locals field\""
0 0 25 3 1 #" "
0 0 14 3 6 #"locals"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 9 #"FunValue?"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 20 #"raise-argument-error"
0 0 25 3 1 #" "
0 0 14 3 6 #"tyname"
0 0 25 3 1 #" "
0 0 19 3 49 #"\"Expected a FunValue? or #f for its funval field\""
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 11 #"static-link"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 14 3 6 #"locals"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 5 #")])))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; build a frame, now with less typing:"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; this allocates enough space for:"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";    - the static link, which is a pointer"
0 0 25 29 1 #"\n"
0 0 17 3 58
#";    - the return address, if we were called as a function"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";    - a return value, if needed (in theory this could be reduced by"
 #" 8 bytes)"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"Frame"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 14 3 14 #"MIN_FRAME_SIZE"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; create a frame based off info from the funvalue"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 24 #"make-frame-from-funvalue"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 41 #"; set up references to and from the frame"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 19 #"set-FunValue-frame!"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 17 #"set-Frame-funval!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #" "
0 0 14 3 6 #"funval"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 5 #"frame"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #"; well, by default, all types are 1 word size, since we have ints an"
 #"d pointers,"
) 0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #"; but in theory, you'd modify this by the size of the actual type (l"
 #"ike a float"
) 0 0 25 29 1 #"\n"
0 0 17 3 46 #"; would be 4 bytes, a character fewer possibly"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-type-size"
0 0 25 3 1 #" "
0 0 14 3 2 #"ty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 9 #"WORD_SIZE"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; a function to call that allocates parameter space for the frame"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"alloc-parameter!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #" "
0 0 14 3 2 #"ty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"bytes"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-type-size"
0 0 25 3 1 #" "
0 0 14 3 2 #"ty"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 14 #"current-offset"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Frame-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 15 #"set-Frame-size!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 14 #"current-offset"
0 0 25 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 69
(
 #"; return our current offset (since we typically use this for binding"
 #")"
) 0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 14 #"current-offset"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; a function to call that allocates a local variable on the frame"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"alloc-local!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #" "
0 0 14 3 2 #"ty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 37 #"; get the number of bytes it takes up"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"bytes"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-type-size"
0 0 25 3 1 #" "
0 0 14 3 2 #"ty"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 14 #"current-offset"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Frame-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 14 #"current-locals"
0 0 25 3 2 #" ("
0 0 14 3 12 #"Frame-locals"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 15 #"set-Frame-size!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 14 #"current-offset"
0 0 25 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 17 #"set-Frame-locals!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 14 #"current-locals"
0 0 25 3 1 #" "
0 0 14 3 5 #"bytes"
0 0 25 3 3 #")) "
0 0 17 3 39 #";; Should this be set-Frame-locals! ???"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 54 #"; and then return the current-offset (not the new one)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 53 #"; so it can be passed back and stored in the VarValue"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; itself as needed"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 14 #"current-offset"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 97
(
 #"; returns the precall frame size, which is the parameters, plus stat"
 #"ic link, plus stuff like that"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"precall-frame-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Frame-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #") ("
0 0 14 3 12 #"Frame-locals"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; prints out a frame"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"output-frame"
0 0 25 3 1 #" "
0 0 14 3 3 #"out"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"fprintf"
0 0 25 3 1 #" "
0 0 14 3 3 #"out"
0 0 25 3 1 #" "
0 0 19 3 93
(
 #"\"Frame: ~a, static-link: ~a, allocated-bytes: ~a, space for locals "
 #"(bytes): ~afunction: ~a~n\""
) 0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 10 #"Label-name"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Frame-name"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"Label-name"
0 0 25 3 2 #" ("
0 0 14 3 17 #"Frame-static-link"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 10 #"Frame-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #") ("
0 0 14 3 12 #"Frame-locals"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #") ("
0 0 14 3 13 #"FunValue-name"
0 0 25 3 2 #" ("
0 0 14 3 12 #"Frame-funval"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 4 #"))))"
0           0
