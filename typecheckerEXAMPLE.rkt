#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 2536 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"envEXAMPLE.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 14 #"\"project2.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"prefix-in"
0 0 25 3 1 #" "
0 0 14 3 6 #"types:"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"typesEXAMPLE.rkt\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";;;Intialize Type Environment to the"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";;;    Empty Environment and then add"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";;;    definitions for the Base Types"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"init-typeEnv"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"tenv"
0 0 25 3 2 #" ("
0 0 14 3 9 #"empty-env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 5 #"    ("
0 0 14 3 18 #"types:make-IntType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"string"
0 0 25 3 2 #" ("
0 0 14 3 21 #"types:make-StringType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 25 3 4 #"   ("
0 0 14 3 19 #"types:make-BoolType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"peng"
0 0 25 3 4 #"   ("
0 0 14 3 19 #"types:make-PengType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"void"
0 0 25 3 4 #"   ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 2 #"))"
0 0 17 3 30 #";;; NOT SURE ABOUT THIS ONE..."
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #";test our x"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 19 #";test our arraytype"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 8 #"       ("
0 0 14 3 18 #"types:make-IntType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 25 3 6 #"     ("
0 0 14 3 20 #"types:make-ArrayType"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"arr"
0 0 25 3 2 #" ("
0 0 14 3 21 #"types:make-StringType"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"typeEnv"
0 0 25 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 25 3 2 #" ("
0 0 14 3 12 #"init-typeEnv"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"init-typechecker"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"typeEnv"
0 0 25 3 2 #" ("
0 0 14 3 12 #"init-typeEnv"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"tc-str"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"init-typechecker"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 3 #"ast"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-str"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 63
#";;;This should take (first ast) - ParseStr should return a list"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"ty"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 3 #") ("
0 0 14 3 7 #"typeEnv"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 2 #"ty"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 12 #"type-of-expr"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";Sequencing check"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 4 #" ) ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                  ["
0 0 14 3 4 #"rest"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 5 #")]))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 3 3 #"   "
0 0 17 3 8 #";Numbers"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 7 #"NumExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 4 #" ) ("
0 0 14 3 18 #"types:make-IntType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 7 #";String"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 10 #"StringExpr"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 4 #" ) ("
0 0 14 3 21 #"types:make-StringType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 8 #";Boolean"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 7 #"BoolVal"
0 0 25 3 1 #" "
0 0 14 3 1 #"_"
0 0 25 3 4 #" ) ("
0 0 14 3 19 #"types:make-BoolType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 5 #";Peng"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"PengExpr"
0 0 25 3 3 #") ("
0 0 14 3 19 #"types:make-PengType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 20 #";Variable Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 7 #"VarExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";           "
0 0 17 3 10 #";Typefield"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"          "
0 0 17 3 2 #"#;"
0 0 17 3 2 #"[("
0 0 17 3 9 #"Typefield"
0 0 17 3 1 #" "
0 0 17 3 4 #"name"
0 0 17 3 1 #" "
0 0 17 3 4 #"type"
0 0 17 3 3 #") ("
0 0 17 3 4 #"let*"
0 0 17 3 3 #" (["
0 0 17 3 2 #"t1"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 1 #" "
0 0 17 3 4 #"type"
0 0 17 3 1 #" "
0 0 17 3 5 #"env)]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 42 #"                                         ["
0 0 17 3 2 #"t2"
0 0 17 3 2 #" ("
0 0 17 3 9 #"apply-env"
0 0 17 3 1 #" "
0 0 17 3 3 #"env"
0 0 17 3 2 #" ("
0 0 17 3 14 #"string->symbol"
0 0 17 3 1 #" "
0 0 17 3 8 #"name))])"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 37 #"                                    ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" [("
0 0 17 3 3 #"not"
0 0 17 3 1 #"("
0 0 17 3 6 #"equal?"
0 0 17 3 1 #" "
0 0 17 3 2 #"#f"
0 0 17 3 1 #" "
0 0 17 3 2 #"t2"
0 0 17 3 4 #")) ("
0 0 17 3 5 #"error"
0 0 17 3 1 #" "
0 0 17 3 32 #"\"no array of this type exists\")]"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                          "
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                   "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";Array Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"ArrayExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 2 #"t2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 11 #"elementType"
0 0 25 3 2 #" ("
0 0 14 3 28 #"types:ArrayType-element-type"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 13 #")           ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 9 #"arraytype"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 4 #"this"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 5 #"which"
0 0 19 3 7 #" exists"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                    [("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 2 #") "
0 0 14 3 11 #"elementType"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Index"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 4 #" int"
0 0 19 3 1 #"\""
0 0 25 3 5 #")]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 9 #";No Value"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 5 #"NoVal"
0 0 25 3 5 #")   ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 10 #";EmptyList"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ["
0 0 22 3 1 #"'"
0 0 25 3 9 #"()      ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 6 #";Break"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"BreakExpr"
0 0 25 3 5 #")   ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";Math Expressions"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"MathExpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 2 #"t2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 1 #"("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 4 #")) ("
0 0 14 3 18 #"types:make-IntType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Types: "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"same!"
0 0 19 3 1 #" "
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 4 #"both"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 7 #"int... "
0 0 19 3 1 #"\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 18 #";Logic Expressions"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"LogicExpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 2 #"t2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 15 #"types:BoolType?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 15 #"types:BoolType?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 4 #")) ("
0 0 14 3 19 #"types:make-BoolType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Types: "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"same!"
0 0 19 3 1 #" "
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 4 #"both"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 8 #"bool... "
0 0 19 3 1 #"\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 19 #";Boolean Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"BoolExpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 2 #"t2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 4 #")) ("
0 0 14 3 19 #"types:make-BoolType"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Types: "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"same!"
0 0 19 3 1 #" "
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 4 #"both"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 8 #"same... "
0 0 19 3 1 #"\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 20 #";Variable Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 7 #"VarDecl"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 5 #"))) ]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 14 3 2 #"t2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 2 #"t2"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 14 3 14 #"types:PengType"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 2 #"t2"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Types: "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t1"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 2 #"t2"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"same!"
0 0 19 3 1 #" "
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 4 #"both"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 8 #"same... "
0 0 19 3 1 #"\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 11 #";Typefields"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"           [("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 9 #"TypeField"
0 0 17 3 1 #" "
0 0 17 3 4 #"name"
0 0 17 3 1 #" "
0 0 17 3 4 #"type"
0 0 17 3 2 #") "
0 0 17 3 1 #"_"
0 0 17 3 1 #" "
0 0 17 3 3 #"..."
0 0 17 3 3 #") ("
0 0 17 3 4 #"let*"
0 0 17 3 3 #" (["
0 0 17 3 5 #"first"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 5 #"ast)]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 55 #"                                                      ["
0 0 17 3 2 #"rs"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 5 #"ast)]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 55 #"                                                      ["
0 0 17 3 6 #"type-t"
0 0 17 3 2 #" ("
0 0 17 3 9 #"typecheck"
0 0 17 3 1 #" "
0 0 17 3 4 #"type"
0 0 17 3 1 #" "
0 0 17 3 5 #"env)]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 55 #"                                                      ["
0 0 17 3 3 #"sym"
0 0 17 3 2 #" ("
0 0 17 3 14 #"string->symbol"
0 0 17 3 1 #" "
0 0 17 3 7 #"name)])"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 54 #"                                                 (cond"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 53 #"                                                   [("
0 0 17 3 3 #"not"
0 0 17 3 1 #"("
0 0 17 3 6 #"equal?"
0 0 17 3 1 #" "
0 0 17 3 6 #"name-t"
0 0 17 3 1 #" "
0 0 17 3 2 #"#f"
0 0 17 3 4 #")) ("
0 0 17 3 5 #"error"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 9 #"typefield"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 7 #"already"
0 0 17 3 1 #" "
0 0 17 3 9 #"somewhere"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 12 #" environment"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 6 #"name)]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 53 #"                                                   [("
0 0 17 3 6 #"equal?"
0 0 17 3 1 #" "
0 0 17 3 2 #"rs"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"()) ("
0 0 17 3 10 #"extend-env"
0 0 17 3 1 #" "
0 0 17 3 3 #"sym"
0 0 17 3 1 #" "
0 0 17 3 4 #"type"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 3 #"sym"
0 0 17 3 1 #" "
0 0 17 3 6 #"type-t"
0 0 17 3 2 #") "
0 0 17 3 5 #"'())]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 53 #"                                                   [("
0 0 17 3 3 #"not"
0 0 17 3 2 #" ("
0 0 17 3 6 #"equal?"
0 0 17 3 1 #" "
0 0 17 3 2 #"rs"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"())) ("
0 0 17 3 10 #"extend-env"
0 0 17 3 5 #" type"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 98
(
 #";Name Types - Pattern 1                                             "
 #"                              "
) 0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"NameType"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                     ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                       [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"kind-t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"kind"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 8 #"existing"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 7 #"already"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"use"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 7 #"another"
0 0 19 3 6 #" place"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #") "
0 0 14 3 6 #"kind-t"
0 0 25 3 5 #"]))] "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 23 #";Name Types - Pattern 2"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"NameType"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"next-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ["
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 48 #"                                              [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"kind-t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"kind"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 8 #"existing"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 7 #"already"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"use"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 7 #"another"
0 0 19 3 6 #" place"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #") "
0 0 14 3 6 #"next-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 23 #";Array Type - Pattern 1"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"ArrayType"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ["
0 0 14 3 7 #"arrtype"
0 0 25 3 2 #" ("
0 0 14 3 20 #"types:make-ArrayType"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 14 3 6 #"kind-t"
0 0 25 3 4 #" )])"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 48 #"                                              [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"kind-t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"kind"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 8 #"existing"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 7 #"already"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"use"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 7 #"another"
0 0 19 3 6 #" place"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 7 #"arrtype"
0 0 25 3 2 #") "
0 0 14 3 7 #"arrtype"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 23 #";Array Type - Pattern 2"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"ArrayType"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 6 #"next-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ["
0 0 14 3 6 #"kind-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ["
0 0 14 3 7 #"arrtype"
0 0 25 3 2 #" ("
0 0 14 3 20 #"types:make-ArrayType"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 14 3 6 #"kind-t"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                             "
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                           [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"kind"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 8 #"existing"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"kind"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ["
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 7 #"already"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"use"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 7 #"another"
0 0 19 3 6 #" place"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"l-exists"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 7 #"arrtype"
0 0 25 3 2 #") "
0 0 14 3 6 #"next-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 24 #";Record Type - Pattern 1"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 10 #"RecordType"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 6 #"fields"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 7 #"name-t?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 49 #"                                                ["
0 0 14 3 13 #"fields-t-list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 6 #"fields"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                             [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 7 #"name-t?"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"your"
0 0 19 3 1 #" "
0 0 19 3 2 #"id"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 7 #"already"
0 0 19 3 1 #" "
0 0 19 3 6 #"bound "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 21 #"types:make-RecordType"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 13 #"fields-t-list"
0 0 25 3 6 #"))]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 14 #";If Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 6 #"IfExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 1 #" "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 2 #"(["
0 0 14 3 6 #"test-t"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ["
0 0 14 3 6 #"true-t"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ["
0 0 14 3 7 #"false-t"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 14 3 6 #"true-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                         [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 15 #"types:BoolType?"
0 0 25 3 1 #" "
0 0 14 3 6 #"test-t"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 8 #" boolean"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 6 #"test-t"
0 0 25 3 3 #")] "
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                         [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"true-t"
0 0 25 3 1 #" "
0 0 14 3 7 #"false-t"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"types"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 6 #" match"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 6 #"true-t"
0 0 25 3 1 #" "
0 0 14 3 7 #"false-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 6 #"true-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";While Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 9 #"WhileExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 4 #")  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 6 #"test-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ["
0 0 14 3 6 #"body-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                     ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                       [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 15 #"types:BoolType?"
0 0 25 3 1 #" "
0 0 14 3 6 #"test-t"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"body"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 8 #" boolean"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 6 #"body-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 6 #"body-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 16 #";With Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 8 #"WithExpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 4 #"pred"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 5 #"val-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 7 #"new-env"
0 0 25 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"push-scope"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #") "
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 5 #"val-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 6 #"pred-t"
0 0 25 3 1 #"("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"pred"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 6 #"body-t"
0 0 25 3 1 #"("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                            [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 5 #"val-t"
0 0 25 3 1 #" "
0 0 14 3 6 #"pred-t"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"val"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"sim"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 5 #"val-t"
0 0 25 3 1 #" "
0 0 14 3 6 #"pred-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                            [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 5 #"val-t"
0 0 25 3 3 #") ("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 6 #"pred-t"
0 0 25 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"values"
0 0 19 3 1 #" "
0 0 19 3 4 #"here"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 4 #"both"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 5 #" ints"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 5 #"val-t"
0 0 25 3 1 #" "
0 0 14 3 6 #"pred-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pop-scope"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 25 3 2 #") "
0 0 14 3 6 #"body-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                   "
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 22 #";Assignment Expression"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 14 #"AssignmentExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 4 #"left"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ["
0 0 14 3 5 #"right"
0 0 25 3 1 #"("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                           [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"l-val"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 4 #" dec"
0 0 19 3 1 #"\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                           [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"left"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 5 #"right"
0 0 19 3 1 #" "
0 0 19 3 5 #"types"
0 0 19 3 1 #" "
0 0 19 3 3 #"don"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 6 #" match"
0 0 19 3 1 #"\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";Field Assignment"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 11 #"FieldAssign"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 6 #"name-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ["
0 0 14 3 6 #"expr-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                        [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"name-t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"needs"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                        [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"name-t"
0 0 25 3 1 #" "
0 0 14 3 6 #"expr-t"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"need"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 5 #" same"
0 0 19 3 1 #"\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                        ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 6 #"name-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 93
(
 #";Making a lot of assumptions assuming that other parts of this thing"
 #" are working right now..."
) 0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 7 #"LetExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"decs"
0 0 25 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                     (["
0 0 14 3 7 #"new-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"push-scope"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ["
0 0 14 3 6 #"decs-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"decs"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ["
0 0 14 3 7 #"exprs-t"
0 0 25 3 1 #"("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                     "
0 0 14 3 7 #"exprs-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           [("
0 0 14 3 12 #"NewArrayExpr"
0 0 25 3 1 #" "
0 0 14 3 6 #"typeid"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 14 3 4 #"init"
0 0 25 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 8 #"typeid-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 1 #" "
0 0 14 3 6 #"typeid"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 52 #"                                                   ["
0 0 14 3 6 #"size-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 52 #"                                                   ["
0 0 14 3 6 #"init-t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"init"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 8 #"typeid-t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Name"
0 0 19 3 1 #" "
0 0 19 3 4 #"does"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 5 #"exist"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 12 #"environment "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"typeid-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 6 #"size-t"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Size"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 4 #"int "
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 6 #"size-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"init-t"
0 0 25 3 2 #" ("
0 0 14 3 28 #"types:ArrayType-element-type"
0 0 25 3 1 #" "
0 0 14 3 8 #"typeid-t"
0 0 25 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"These"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"same"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 6 #"init-t"
0 0 25 3 1 #" "
0 0 14 3 8 #"typeid-t"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 49 #"                                                ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 8 #"typeid-t"
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 20 #";Chris' NewArrayExpr"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 2 #"#;"
0 0 25 3 2 #"[("
0 0 14 3 12 #"NewArrayExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 12 #"num-elements"
0 0 25 3 1 #" "
0 0 14 3 11 #"initial-val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 15 3 4 #"let*"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                              (["
0 0 14 3 5 #"arrty"
0 0 25 3 2 #" ("
0 0 14 3 17 #"types:actual-type"
0 0 25 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 25 3 1 #" "
0 0 14 3 7 #"typeEnv"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ["
0 0 14 3 7 #"countty"
0 0 25 3 2 #" ("
0 0 14 3 17 #"types:actual-type"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 12 #"num-elements"
0 0 25 3 1 #" "
0 0 14 3 7 #"typeEnv"
0 0 25 3 1 #" "
0 0 14 3 4 #"venv"
0 0 25 3 1 #" "
0 0 14 3 5 #"loop?"
0 0 25 3 1 #" "
0 0 14 3 5 #"level"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ["
0 0 14 3 6 #"initty"
0 0 25 3 2 #" ("
0 0 14 3 17 #"types:actual-type"
0 0 25 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 25 3 1 #" "
0 0 14 3 8 #"init-val"
0 0 25 3 1 #" "
0 0 14 3 7 #"typeEnv"
0 0 25 3 1 #" "
0 0 14 3 4 #"venv"
0 0 25 3 1 #" "
0 0 14 3 5 #"loop?"
0 0 25 3 1 #" "
0 0 14 3 5 #"level"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 16 #"types:ArrayType?"
0 0 25 3 1 #" "
0 0 14 3 5 #"arrty"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 13 #"log-typeerror"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"~a"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 14 #"types:IntType?"
0 0 25 3 1 #" "
0 0 14 3 7 #"countty"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 13 #"log-typeerror"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"number"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 8 #"elements"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 3 #"int"
0 0 19 3 5 #" type"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 3 #") ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                              [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 10 #"types:type"
0 0 25 3 1 #" "
0 0 14 3 2 #"=?"
0 0 25 3 1 #" "
0 0 14 3 6 #"initty"
0 0 25 3 2 #" ("
0 0 14 3 28 #"types:ArrayType-element-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"arrty"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 13 #"log-typeerror"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 13 #"intialization"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 5 #"match"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 9 #" elements"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"ast"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 19 #"types:make-VoidType"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 14 3 5 #"arrty"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 17 3 20 #";            IntType"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";            StringType"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";            VoidType"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";            BoolType"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";            PengType"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";            ArrayType"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";            RecordType"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";            NameType"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ["
0 0 14 3 1 #"_"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Type"
0 0 19 3 1 #" "
0 0 19 3 8 #"Checking"
0 0 19 3 1 #" "
0 0 19 3 6 #"Error\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"           )])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 12 #"type-of-expr"
0 0 25 3 2 #"))"
0           0
