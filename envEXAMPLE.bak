#lang racket

(provide (all-defined-out))

(require test-engine/racket-tests)


;;; Create a new empty environment
(define (empty-env)
  (list (make-hash)))

;;; Extend an environment with a symbol and
;;;   a value e.g. (symbol, value)
(define (extend-env env sym val)
  ;;; Use hash-set! as a mutator, assignment operation
  (hash-set! (first env) sym val)
  env)

;;; Apply an environment to a given symbol
;;;   i.e. lookup symbol in the hash table and
;;;   return the associated value
(define (apply-env env sym)
  (cond
    [(eq? env '()) #f]
    [(hash-has-key? (first env) sym) (hash-ref (first env) sym)]
    [else (apply-env (rest env) sym)]))

;;; push-scope
;;; Push a new scope onto the environment
(define (push-scope env)
  (cons (make-hash) env))

;;; pop-scope
;;; Pop the first scope from the environment
(define (pop-scope env)
  (rest env))
